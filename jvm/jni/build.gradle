// This is all you need for a basic Java project. Everything else after this
// one line is auxiliary.
apply plugin: 'java'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

apply plugin: 'idea'
apply plugin: 'maven'

description 'A Java project that uses JNI'

def nativeHeadersDir = file("$buildDir/nativeHeaders")

//noinspection UnnecessaryQualifiedReference
def jvm = org.gradle.internal.jvm.Jvm.current()

task generateJniHeaders(type: Exec) {
    def outputFile = file("$nativeHeadersDir/native.h")
    inputs.files sourceSets.main.output
    outputs.file outputFile
    executable jvm.getExecutable('javah')
    args "-o", outputFile
    args "-classpath", sourceSets.main.output.classesDir
    args 'example.jni.Util'
}

apply plugin: 'c'


model {
    components {
        jni(NativeLibrarySpec) {
            baseName 'native'
            sources {
                c {
                    source {
                        srcDir "src/main/c"
                        include "**/*.c"
                    }
                }
            }
            targetPlatform 'linux_amd64'
            // Disable static version
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.all {
                if (targetPlatform.operatingSystem.linux) {
                    println "Using JNI headers from JVM: ${jvm.javaHome}"
                    cCompiler.args '-I', "${jvm.javaHome}/include"
                    cCompiler.args '-I', "${jvm.javaHome}/include/linux"
                }
                cCompiler.args "-I${nativeHeadersDir}"
            }
        }
    }
}

model {
    platforms {
        linux_amd64 {
            architecture 'amd64'
            operatingSystem 'linux'
        }
    }
}

tasks.withType(CCompile) { task -> task.dependsOn generateJniHeaders }

